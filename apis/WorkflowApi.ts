/* tslint:disable */
/* eslint-disable */
/**
 * Cozy Creator
 * Cozy Creator OpenAPI specification
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Workflow,
  WorkflowOutput,
  WorkflowResponse,
} from '../models/index';
import {
    WorkflowFromJSON,
    WorkflowToJSON,
    WorkflowOutputFromJSON,
    WorkflowOutputToJSON,
    WorkflowResponseFromJSON,
    WorkflowResponseToJSON,
} from '../models/index';

export interface ExecuteWorkflowRequest {
    workflow: Workflow;
}

export interface StreamWorkflowRequest {
    id: string;
}

/**
 * 
 */
export class WorkflowApi extends runtime.BaseAPI {

    /**
     * This endpoint executes a workflow consisting of multiple nodes.
     * Executes a workflow
     */
    async executeWorkflowRaw(requestParameters: ExecuteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowResponse>> {
        if (requestParameters['workflow'] == null) {
            throw new runtime.RequiredError(
                'workflow',
                'Required parameter "workflow" was null or undefined when calling executeWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflow/execute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowToJSON(requestParameters['workflow']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint executes a workflow consisting of multiple nodes.
     * Executes a workflow
     */
    async executeWorkflow(requestParameters: ExecuteWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowResponse> {
        const response = await this.executeWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint returns Server-Sent Events (SSE) for streaming the output of a workflow identified by the given ID.
     * Streams the workflow output for the given workflow ID
     */
    async streamWorkflowRaw(requestParameters: StreamWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowOutput>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling streamWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflow/{id}/stream`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowOutputFromJSON(jsonValue));
    }

    /**
     * This endpoint returns Server-Sent Events (SSE) for streaming the output of a workflow identified by the given ID.
     * Streams the workflow output for the given workflow ID
     */
    async streamWorkflow(requestParameters: StreamWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowOutput> {
        const response = await this.streamWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
