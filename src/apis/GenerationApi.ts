/* tslint:disable */
/* eslint-disable */
/**
 * Cozy Creator
 * Cozy Creator OpenAPI specification
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  JobRequest,
  JobResult,
  JobStatusResponse,
  JobStreamEvent,
} from '../models/index';
import {
    JobRequestFromJSON,
    JobRequestToJSON,
    JobResultFromJSON,
    JobResultToJSON,
    JobStatusResponseFromJSON,
    JobStatusResponseToJSON,
    JobStreamEventFromJSON,
    JobStreamEventToJSON,
} from '../models/index';

export interface GetJobResultRequest {
    id: string;
    accept?: GetJobResultAcceptEnum;
}

export interface GetJobStatusRequest {
    id: string;
    accept?: GetJobStatusAcceptEnum;
}

export interface StreamJobEventsRequest {
    id: string;
    accept?: StreamJobEventsAcceptEnum;
}

export interface SubmitAndStreamJobRequest {
    contentType: SubmitAndStreamJobContentTypeEnum;
    jobRequest: JobRequest;
    accept?: SubmitAndStreamJobAcceptEnum;
}

export interface SubmitJobRequest {
    contentType: SubmitJobContentTypeEnum;
    jobRequest: JobRequest;
    accept?: SubmitJobAcceptEnum;
}

/**
 * 
 */
export class GenerationApi extends runtime.BaseAPI {

    /**
     * Retrieve the completed image result of a job
     */
    async getJobResultRaw(requestParameters: GetJobResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobResult>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getJobResult().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/jobs/{id}/result`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobResultFromJSON(jsonValue));
    }

    /**
     * Retrieve the completed image result of a job
     */
    async getJobResult(requestParameters: GetJobResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobResult> {
        const response = await this.getJobResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the current status of a job
     */
    async getJobStatusRaw(requestParameters: GetJobStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobStatusResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getJobStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/jobs/{id}/status`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobStatusResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the current status of a job
     */
    async getJobStatus(requestParameters: GetJobStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobStatusResponse> {
        const response = await this.getJobStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the event-stream produced by a job. Starts the event stream from the beginning.
     * Stream events for a specific job
     */
    async streamJobEventsRaw(requestParameters: StreamJobEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobStreamEvent>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling streamJobEvents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/jobs/{id}/stream-events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobStreamEventFromJSON(jsonValue));
    }

    /**
     * Get the event-stream produced by a job. Starts the event stream from the beginning.
     * Stream events for a specific job
     */
    async streamJobEvents(requestParameters: StreamJobEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobStreamEvent> {
        const response = await this.streamJobEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit a job and also returns an event-stream object (async iterable)
     * Submit a job and stream its events
     */
    async submitAndStreamJobRaw(requestParameters: SubmitAndStreamJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobStreamEvent>> {
        if (requestParameters['contentType'] == null) {
            throw new runtime.RequiredError(
                'contentType',
                'Required parameter "contentType" was null or undefined when calling submitAndStreamJob().'
            );
        }

        if (requestParameters['jobRequest'] == null) {
            throw new runtime.RequiredError(
                'jobRequest',
                'Required parameter "jobRequest" was null or undefined when calling submitAndStreamJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-msgpack';

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/jobs/submit-and-stream-events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobRequestToJSON(requestParameters['jobRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobStreamEventFromJSON(jsonValue));
    }

    /**
     * Submit a job and also returns an event-stream object (async iterable)
     * Submit a job and stream its events
     */
    async submitAndStreamJob(requestParameters: SubmitAndStreamJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobStreamEvent> {
        const response = await this.submitAndStreamJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit a new job to generate images
     */
    async submitJobRaw(requestParameters: SubmitJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobStatusResponse>> {
        if (requestParameters['contentType'] == null) {
            throw new runtime.RequiredError(
                'contentType',
                'Required parameter "contentType" was null or undefined when calling submitJob().'
            );
        }

        if (requestParameters['jobRequest'] == null) {
            throw new runtime.RequiredError(
                'jobRequest',
                'Required parameter "jobRequest" was null or undefined when calling submitJob().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/x-msgpack';

        if (requestParameters['accept'] != null) {
            headerParameters['Accept'] = String(requestParameters['accept']);
        }

        if (requestParameters['contentType'] != null) {
            headerParameters['Content-Type'] = String(requestParameters['contentType']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // APIKeyHeader authentication
        }

        const response = await this.request({
            path: `/jobs/submit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobRequestToJSON(requestParameters['jobRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobStatusResponseFromJSON(jsonValue));
    }

    /**
     * Submit a new job to generate images
     */
    async submitJob(requestParameters: SubmitJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobStatusResponse> {
        const response = await this.submitJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetJobResultAcceptEnum = {
    Json: 'application/json',
    XMsgpack: 'application/x-msgpack'
} as const;
export type GetJobResultAcceptEnum = typeof GetJobResultAcceptEnum[keyof typeof GetJobResultAcceptEnum];
/**
 * @export
 */
export const GetJobStatusAcceptEnum = {
    Json: 'application/json',
    XMsgpack: 'application/x-msgpack'
} as const;
export type GetJobStatusAcceptEnum = typeof GetJobStatusAcceptEnum[keyof typeof GetJobStatusAcceptEnum];
/**
 * @export
 */
export const StreamJobEventsAcceptEnum = {
    TextEventStream: 'text/event-stream',
    ApplicationXMsgpackStream: 'application/x-msgpack-stream'
} as const;
export type StreamJobEventsAcceptEnum = typeof StreamJobEventsAcceptEnum[keyof typeof StreamJobEventsAcceptEnum];
/**
 * @export
 */
export const SubmitAndStreamJobContentTypeEnum = {
    Json: 'application/json',
    XMsgpack: 'application/x-msgpack'
} as const;
export type SubmitAndStreamJobContentTypeEnum = typeof SubmitAndStreamJobContentTypeEnum[keyof typeof SubmitAndStreamJobContentTypeEnum];
/**
 * @export
 */
export const SubmitAndStreamJobAcceptEnum = {
    TextEventStream: 'text/event-stream',
    ApplicationXMsgpackStream: 'application/x-msgpack-stream'
} as const;
export type SubmitAndStreamJobAcceptEnum = typeof SubmitAndStreamJobAcceptEnum[keyof typeof SubmitAndStreamJobAcceptEnum];
/**
 * @export
 */
export const SubmitJobContentTypeEnum = {
    Json: 'application/json',
    XMsgpack: 'application/x-msgpack'
} as const;
export type SubmitJobContentTypeEnum = typeof SubmitJobContentTypeEnum[keyof typeof SubmitJobContentTypeEnum];
/**
 * @export
 */
export const SubmitJobAcceptEnum = {
    Json: 'application/json',
    XMsgpack: 'application/x-msgpack'
} as const;
export type SubmitJobAcceptEnum = typeof SubmitJobAcceptEnum[keyof typeof SubmitJobAcceptEnum];
